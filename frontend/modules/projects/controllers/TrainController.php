<?php

namespace frontend\modules\projects\controllers;

use frontend\modules\Projects\models\Daysavailable;
use frontend\modules\projects\models\DaysavailableSearch;
use frontend\modules\projects\models\Passenger;
use frontend\modules\Projects\models\Trainclass;
use frontend\modules\Projects\models\Trainstatus;
use Yii;
use frontend\modules\projects\models\Train;
use frontend\modules\projects\models\TrainSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * TrainController implements the CRUD actions for Train model.
 */
class TrainController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }
    public function beforeAction($action)
    {
        $this->enableCsrfValidation=false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Train models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new TrainSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Train model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Train model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Train();
        $model1=new Trainstatus();

        if ($model->load(Yii::$app->request->post()) && ($model1->load(Yii::$app->request->post())  &&$model->save(false)) ){

            $model1->Train_ID=$model->Train_ID;


            $days= Yii::$app->request->post();
            $availabledays=Yii::$app->request->post('Trainstatus');
            $actualdays=$availabledays['Available_days'];
            $daysstring = implode( ",", $actualdays);
            $model1->Available_days=$daysstring ;
            $model1->save(false);
            return $this->redirect(['view', 'id' => $model->Train_ID]);
        } else {
            $model1->Available_days=explode(",",$model1->Available_days);
            return $this->render('create', [
                'model' => $model,
                'model1'=>$model1,

            ]);
        }
    }

    //user view to serach trains
    public function actionUsersearchtrains(){

        $model= new Train();


        $sql='SELECT train.Train_ID, Train_name,Train_type,Source_stn,Destination_stn,Economy_classfare,First_classfare,Economy_seatnumber,First_seatnumber,Available_days,Arrival_time,Departure_time FROM `train` join trainstatus on train.Train_ID=trainstatus.Train_ID 
           ';


        $data=$model->findbysql($sql)->asArray()->all();

        return $this->render('usersearch', [
            'model' => $data,

        ]);
    }

    //search action
    public function actionAdvancedfilter(){

        $model= new Train();
      //take post parameters
       $post=Yii::$app->request->post();
       $source=$post['sorc'];
       $dest=$post['dest'];

       $sql="SELECT * FROM `train` join trainstatus on train.Train_ID=trainstatus.Train_ID 
         where train.Source_stn ='$source' and train.Destination_stn ='$dest'" ;

        $data=$model->findbysql($sql)->asArray()->all();
            
        return $this->render('usersearch',[
            'model' => $data,

        ]);
    }


    //book view' booktrain
    public function actionBooktrain($id){

        $model= new Train();
        $model=$this->findModel($id);
        $model1=new Passenger();
        $model2= new Trainstatus();



        if ($model1->load(Yii::$app->request->post()) ) {

            $model1->Train_ID=$model->Train_ID;

            $model1->BookedDate=Yii::$app->formatter->asDate($model1->BookedDate,'yyyy-MM-dd',date('w'));
            //check availability
            $isavailble=$model2->checkAvailability ($id,$model1->BookedDate,$model1->Pcategory);
            if($isavailble==1){

                //save user records from the session
                $model1->Pname=Yii::$app->user->identity->username;
                //$model1->Paddress=Yii::$app->user->identity->address;
                $model1->Age=Yii::$app->user->identity->Age;
                $model1->Pstatus='active';
                $model1->Pgender=Yii::$app->user->identity->Gender;

                if( $model1->save(false)){
                    //update seat by count 11

                    $train=$model2->find()->where(['Train_ID'=>$id])->one();
                    if($model1=='Economy'){

                        $train['BookedFirstseats']=$train['BookedFirstseats']+1;
                        $train->save(false);
                    }
                    else{

                        $train['BookedEcoseats']=$train['BookedEcoseats']+1;
                        $train->save(false);
                    }
                    return $this->redirect(['mybookings','id'=>Yii::$app->user->identity->username]);

                }

            }

            else{

                Yii::$app->session->setFlash('success',$isavailble);
                return $this->redirect(['booktrain','id'=>$id]);
            }

  }else {
            return $this->render('booktrain', [
                'model' => $model,
                'model1' => $model1,
            ]);
        }



    }
    public function actionMybookings($id)
    {

        $model=new passenger();
        $bookings=$model->find()->where(['Pname'=>$id])->all();
        return $this->render('mybookings', [
            'model' => $bookings,
        ]);
    }
    public function actionCancelbooking($id)
    {

        $model=new Passenger();
        $model2=new Trainstatus();
        $bookings=$model->find()->where(['Ticket_ID'=>$id])->one();
        if($bookings){
            $date=$bookings->BookedDate;
            $train_id=$bookings->Train_ID;

            $category=$bookings->Pcategory;
            $bookings->delete();

            $train=$model2->find()->where(['Train_ID'=>$id])->one();
            if($train){
                if( $category=='Economy'){

                    $train->BookedEcoseats=$train->BookedEcoseats-1;
                    $train->save(false);
                }
                else{

                    $train->BookedFirstseats=$train->BookedFirstseats-1;
                    $train->save(false);
                }
            }
            else{
                Yii::$app->session->setFlash('success','Reservation cancelled successfuly');
                return $this->redirect(['usersearchtrains']);
            }
            Yii::$app->session->setFlash('success','Reservation cancelled successfuly');
            return $this->redirect(['usersearchtrains']);
        }

        else{
            Yii::$app->session->setFlash('success','Reservation does not exit');
            return $this->redirect(['usersearchtrains']);
        }
    }
    /**
     * Updates an existing Train model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {

            return $this->redirect(['view', 'id' => $model->Train_ID]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing Train model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Train model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Train the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Train::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
